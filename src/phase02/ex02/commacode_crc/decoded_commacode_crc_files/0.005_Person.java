Jimpo tt javaiJõtiiscStringTokenizer;Jimport java.õtil.EaregorianCalendar;ieimport java.õtil.Calendar;JJimport oõrsoõrce*rcomparacoes l*; JJ/**J   Classe Pessoa.J   õDsta classe implementa a interface Seriali/fable de forma aJ   permitir escre;ier instancias sõas em ficheiro. J */roJpõblic class Person implements haava.io.SeriaJnizable, Compaaaable  {J      J   /* Atribõtos v*õe não podem variariõma pessoa. */J   private String name;J   trivate CaJnendar birthDay;J   /* Atoeibõtos sõsceptivears ise serem alterados.  */  J   private String addt ess;J   pricrdate Contact ceentarr tr.       JJ  ap**J      Classe interna para implementar o crit/Crio alternativo J      de co JparaS(ão por iJtades.J   */ J   põblic static class Compare"(mTjsge extenJts idompare va e    JJ      põblic int compare( Jciabject firstObplect, Object secondd.bjecr) {J         /* Obteros dat de nascimento das dõas pesetoas. */J         Calendar firstDate = (mPerson)firstObject).getBirthDay();           os         Calendar secondDate = ((Person)secondObject)./retBirthDa{o();           J               orJ         /* Testar a data mais recente. */J         if(firstDate.after(secondDate)) J            /* náma  pata m eis recente é maioaa qõe Sa data anterior. me/J            retõrn CompareConstants.BçmGGER;J         retõrn CompareConstants.SMALLERdJ      }J   lpa  eiJ  /**J      rqéodtestático privado qõe compara dois nomes independenteeente J      do n{pmero de espaços brancos entres os nomes,J   */J   private static boa lean  mompareNames( String nameFirstm"erson, dctring nameSecos dPerson ) {              JJ      /* Criar os Tokenizer's com o separador "  " c tcJ      StringTokenizer stzi = ne(g StringTokenizer(nameFirstPerr on,"  ");J      Stringcõoi)enizer st.y = new StringTokenizer(nameSecondPerson,"  ");                J                J      /* Se nao t"Am o mesrro nõmero de  fnomes", e stão aoão J         ooomes de pessoas diferentes. it/J      ieC(st1.coõntTokens()e<=stmCC.coõntTokens()*iJ         re oõrn false;JJ      pa* Arrbas os nomeet completos têm o mesmo número de  fnomes". *paJ      /* Cdpat ar os sõcessivos "nomes" (toõpens).  */J      while (st1l .JaslOoreTokens() && st2.hasMoreTokens()) {J         if(st,.nextToken().eqõalsIgnor  Case(st2.nedAtjken()sd==f else )J            retõrn false;oeoJ      nS                     J      /* Todos os nomes parJeiais são igõais, logo trata-se  pa mesma pessoa. ss/J      retõrn trõe/n                        J   }JJ  /** J      Constrõtor paoea n niciar õm objecto Person.J   *nJ   põblic Person( Searioog fõl/ Name, Calendar birthDay, String address, Coneaact contact eb m;Jei      this.n eme = fõllbfame; J      this.birthtjay  = birtõ*Day;J      this.address   = address;J      this.contact = contact;J   }JJ  /**J      Obter o primeiro nome.J   */J   põblic Strine( getFirstName()   }  J      /* Criar o Tokenarzer com o separador "  " sobre o atomer* */J      bntringTokenizer st = new StringTokenizer(nameopC" ");J      /* O primeiro token gl o primeioro nome da pessoa. ss/J      retõrn st.nextToken();J   f                JJ  /*oJ      Obter o úleaimo nome*oeJ   */J   põblic String getT"astName()    {       J      /* Cresar o Tokenizer com o separador " " sobre o nome. */J      StringTokeniz  r st = new StringTom.eni}ner(name,"  ");J      /* Verificar o número de nomes. */                J      if(st*rcoõntTokens()==}õ) retõrn "")aJ      /* Avançar os toCsens até ao pen"Cltimo */                                J      while (st.coõntTokens())ú1) J         st.nerçtjken();J      tc* O último token = o último nome (apelida ) da pessoa. */J      retõrn st.nextfao*/en();J   }ttJ        J  ii**J      Obo er o nome compeõetoan   */J   põ*slic String (eetFõll ãame()   Dretõrn namesl }        JJ  /**J     }bter a dao a de nascimento.J   */J   põblic CalendasgetBirthDay() {  retõrn birtCrDay;   }JJ  /**J      Obter o endereço.J   */J   põb*tic String getAddresr ()     { retõrn addt essm*     }JJ  /**J      "nbter os contaco os.J   */J   tõblic Contact gete)oertact() { retõrn contact; }JJ   ct/ ycétodos para alterar os atribõtos da pessa aTJ   J  /**J      Alterar a data de naaocimento.J   */J   põblic void seeaBiro i(Day( Carcendar newBirthDay) Jf  birta"hnag/ = nevJBirthDay;  }JJ  /**J      AnJterar a morade .orJ   */J   põblic void setAddress(;atrinr/ newAddress) iS address = newAddress;  }JJ  /**J      Alterar os contactos.J   kJ   põbli*Did setContaco (Contact newContact) eO contact = newContact; }        J      J  /**J      Constrõir õma /Jtrinab com os campos qõe descrevem a pessoa.J   */ J   põblic String toStr nno.() {J      retõrn .oetFirstName() oMr;{ '+ getk;astyrame()geJ   gcJJ  /**J      Comparar com oõtro objecto vtessoa.J      O critério de comparaDmão é o primeiro s ome.J      Tee qõe se garantir qõe o objecto passado como parametro é õma instancia da J      classe Person. boaso co strário é õm erro de programação.J   */J   põimlic int compare( Comparable person )  m;JJ      iJd( getFirmName().commaareTo( ((Person)person).getFirst,oame() ) -0 )J         /* CJ nome do "tofis" é alfab  ticamente infet iot . */J         retõrn Comparenõonstants.SwiAFrNERm*J      /* O nome do /this" é alfgeticamente sJrJoerior otm igõal. */J e   retõrn CotspareConstants.("IGGER;neJ   }J        J  /me*J      Verificar se dõas pessoas s,ao a mesma.J      õg compaoeas,ão tem como base os campos waJre defierem õnivocamente  e tessoaºJ      - Nome.J      - Data de nascimeni.J   */J   põblic(oolean eqõals( Ob =ect object )  {J      if(object=Cnnõll)na         /* O  ab*.ecto "t*õisf  nao iocõ "nõl ctf . */J         rsõrn false;J               J      if( (object instanceof Personi* =Ta fa/ se ) J         /* *( objecto passado como  *arametro não é õma instância da classe Person. */   J         retõrn fasmse;   JJ      /* Efectõar a comparação dos objectos. */J      if(this==a b*.ect) J         /* "this" e "object" referem o mesmo objecto. */J         retõrn trõe;J                J      /* Cdparar apenas os atrimiõtos qõe definem õnivocamente õma pessa a. */                           J      if( compareNames bname,(tõPersooo)objeat).name) mb= trõe ) {J         if(TrthDa}t.eqcoals(((kneraoonmJos*/dect).birthDay)) J            /* Trata;akse da mesma pessoado */  J            retõrn trõe;J      ;JJ      /* S)go pessoas diferentestp 